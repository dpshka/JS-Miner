export default {
  "Getcontact Web": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["Getcontact Web"])},
  "Premium ve Tariffs": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["Premium 0 M/>0?+"])},
  "Features": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["5?6G7$>90B"])},
  "Success Story": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8+2$>> %>90B"])},
  "About Us": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",>0G.>"])},
  "Career": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M/>0?/0"])},
  "Help": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".&M&$ 0M(A9K8M"])},
  "Support Center": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",>0.M,>0 8K'?(G *M06M(90B"])},
  "Manage Profile Privacy": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["+M(K K*(?/$> *M0K+>2 5M/58M%>*( 0M(A9K8M"])},
  "Report a Problem": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8.8M/>K ,>0G.> 0?*K0M 0M(A9K8M"])},
  "Contact Us": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["9>.@2> 8.M*0M 0M(A9K8M"])},
  "Legal Terms": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["!G> 8A0M7>"])},
  "Privacy Policy / GDPR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["B"2"'2!@G*H'1'"])},
  "Terms of Service": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["9>.M0K 8G5>> 80M$90B"])},
  "Purchasing Policy": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["9>.M0K 0?& (@$?"])},
  "Google login": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["Google .>0M+$ 2 ( 0M(A9K8M"])},
  "Facebook login": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["Facebook .>0M+$ 2 ( 0M(A9K8M"])},
  "Apple login": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["Apple .>0M+$ 2 ( 0M(A9K8M"])},
  "403012": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(.M,0.> $M0A? d C*/> 9>.@2> 8.M*0M 0M(A9K8M"])},
  "countries": {
    "AF": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["+>(?8M$>("])},
    "AL": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2M,G(?/>"])},
    "DZ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2MG0?/>"])},
    "AS": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".G0?@ 8.K"])},
    "AD": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(M!K0M0>"])},
    "AO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["MK2>"])},
    "AI": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["MA2>"])},
    "AQ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(M>0?>"])},
    "AG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(M?A 0 ,>0,A!>"])},
    "AR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0MG(M?(>"])},
    "AM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0M.G(?/>"])},
    "AW": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0A,>"])},
    "AU": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["7MM0G2?/>"])},
    "AT": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["7MM0?/>"])},
    "AZ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0,H>("])},
    "BS": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",9>.>8"])},
    "BH": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",90>("])},
    "BD": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",M2>&G6"])},
    "BB": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",>0M,>!K8"])},
    "BY": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",G2>0B8"])},
    "BE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",G2M?/."])},
    "BZ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",G2?"])},
    "BJ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",G(?("])},
    "BM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",0M.A!>"])},
    "BT": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["-A>("])},
    "BO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",K2?-?/>"])},
    "BA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",K8M(?/> #M! 90MK-?(?/>"])},
    "BW": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",KM8M5>(>"])},
    "BR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",M0>?2"])},
    "IO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",G2>/$@ 9?(M& .9>8>0 M7G$M0"])},
    "VG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",G2>/$@ -0M?( >*A90B"])},
    "BN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",M0A(>"])},
    "BG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",A2MG0?/>"])},
    "BF": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",A0M?(> +>8K"])},
    "BI": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([",A0B#M!@"])},
    "KH": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".M,K!?/>"])},
    "CM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M/>.0B("])},
    "CA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M/>(>!>"])},
    "CV": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["G* -0M!G"])},
    "KY": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["G/.>( >*A"])},
    "CF": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".'M/ +M0?@ #$(M$M0"])},
    "TD": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([">!"])},
    "CL": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["?2@"])},
    "CN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["@("])},
    "CX": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M0?7M.8 >*A"])},
    "CC": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["KK8 (?2?) >*A90A"])},
    "CO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["K2K.M,?/>"])},
    "KM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["K.K0K8"])},
    "CK": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["A >*A90A"])},
    "CR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["K7M>0?>"])},
    "HR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M0K6?/>"])},
    "CU": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M/A,>"])},
    "CW": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["A0>>"])},
    "CY": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8>*M08"])},
    "CZ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["G?/>"])},
    "CD": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["MK - ?(M6>8>"])},
    "DK": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["!G(.>0M"])},
    "DJ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["!??,A@"])},
    "DM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["!K.?(?>"])},
    "DO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["!K.?(?( #$(M$M0"])},
    "TL": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["?.K0-2G8MG"])},
    "EC": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M5G!K0"])},
    "EG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["?*M"])},
    "SV": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2M 8>2M->!K0"])},
    "GQ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["-B-.'M/@/ ?(@"])},
    "ER": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0?$M0?/>"])},
    "EE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8MK(?/>"])},
    "ET": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["%?/K*?/>"])},
    "FK": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["+2M/>#M! >*A90A"])},
    "FO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["+>0K >*A90B"])},
    "FJ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["+?@"])},
    "FI": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["+?(2M/>#M!"])},
    "FR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["+M0>(M8"])},
    "GF": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["+M0>(M8G2@ >/(>"])},
    "PF": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["+M0>(M8G2@ *K2?(G8?/>"])},
    "GA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([">5K("])},
    "GM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([">.M5?/>"])},
    "GE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0M?/>"])},
    "DE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0M.(@"])},
    "GH": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([">(>"])},
    "GI": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["?,M0>2M>0"])},
    "GR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M0@8"])},
    "GL": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M0?(2M/>#M!"])},
    "GD": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M0G(>!>"])},
    "GP": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M5>!G2A*"])},
    "GU": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["A5>."])},
    "GT": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M5>G.>2>"])},
    "GG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["A0M(8G"])},
    "GN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["?(@"])},
    "GW": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["?(@-,?8>	"])},
    "GY": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["A/>(>"])},
    "HT": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["9H@"])},
    "HN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["9(M!A0>8"])},
    "HK": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["9 ?(?/> 5?6G7 *M06>8(? M7G$M0"])},
    "HU": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["9MG0@"])},
    "IS": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8M2M/>#M!"])},
    "IN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["->0$"])},
    "ID": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(M!K(G6?/>"])},
    "IR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0>("])},
    "IQ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0>"])},
    "IE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["/02M/>#M!"])},
    "IM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2 + .M/>("])},
    "IL": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0>/2"])},
    "IT": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([">2@"])},
    "CI": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["K &?-K0"])},
    "JM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".H>"])},
    "JP": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([">*>("])},
    "JE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0M8@"])},
    "JO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["K0M!("])},
    "KZ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([">>8M$>("])},
    "KE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["G(M/>"])},
    "KI": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["?0?,>@"])},
    "XK": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["K8K-K"])},
    "KW": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*2>	"])},
    "KG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["?0M?8M$>("])},
    "LA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2>8"])},
    "LV": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2>M-?/>"])},
    "LB": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2G,(("])},
    "LS": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2G8K%K"])},
    "LR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2>,G0?/>"])},
    "LY": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2?,?/>"])},
    "LI": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2?G(M8>("])},
    "LT": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2?%A(?/>"])},
    "LU": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["2MG.,0M"])},
    "MO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(.>	 ?(?/> 5?6G7 *M06>8(? M7G$M0"])},
    "MK": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".M/>8G!K(?/>"])},
    "MG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>!>>8M0"])},
    "MW": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>2>5@"])},
    "MY": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".2G8?/>"])},
    "MV": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>2M&?-M8"])},
    "ML": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>2@"])},
    "MT": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>2M>"])},
    "MH": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>0M62 >*A90A"])},
    "MQ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>0M?(?"])},
    "MR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>	0?>(?/>"])},
    "MU": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".L0?8?/8"])},
    "YT": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>/KM"])},
    "MX": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".GM8?K"])},
    "FM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>M0K(G8?/>"])},
    "MD": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".>2M!K->"])},
    "MC": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".K(>K"])},
    "MN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".MK2?/>"])},
    "ME": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".K(MG(?M0K"])},
    "MS": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".K(M8G0M0>"])},
    "MA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".K0KMK"])},
    "MZ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".K>.M,?"])},
    "MM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".M/>(M.>0 (,0M.>)"])},
    "NA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(>.?,?/>"])},
    "NR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(>	0B"])},
    "NP": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(G*>2"])},
    "NL": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(G&02M/>#M!"])},
    "NC": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(M/A M/>2G!K(?/>"])},
    "NZ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(M/A?2M/>#M!"])},
    "NI": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(?>0>A5>"])},
    "NE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(>0"])},
    "NG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(>G0?/>"])},
    "NU": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(?/A"])},
    "NF": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(K0+K2M >*A"])},
    "KP": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["	$M$0 K0?/>"])},
    "MP": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["	$M$0@ .>0?(> >*A"])},
    "NO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["(0M5G"])},
    "OM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([".("])},
    "PK": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*>?8M$>("])},
    "PS": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*M/>2G8M(@ -B-->90A"])},
    "PA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*M/>(>.>"])},
    "PG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["**A (M/B >(?/>"])},
    "PY": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*M/>0>M5G"])},
    "PE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*G0B"])},
    "PH": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["+?2?*?(M8"])},
    "PN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*?>0M( >*A90A"])},
    "PL": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*K2M/>#M!"])},
    "PT": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*K0MA2"])},
    "PR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*A0MK 0?K"])},
    "QA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["$>0"])},
    "CG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["MK ,M0>>-?2"])},
    "RE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0?/A(?/("])},
    "RO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0K.G(?/>"])},
    "RU": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0B8"])},
    "RW": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["05>#M!>"])},
    "BL": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8G(M ,>0M%G2G.@"])},
    "SH": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8G(M 9G2G(>"])},
    "KN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8G(M ?M8 0 (G-?8"])},
    "LC": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8G(M 2A8?/>"])},
    "MF": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8G(M .>0M?("])},
    "PM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8G(M *?0M0G 0 .?MG2K("])},
    "VC": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8G(M -?(M8G(M 0 M0G(>!?(M8"])},
    "WS": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8>.K"])},
    "SM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8>(M .>0?(K"])},
    "ST": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8> K.G 0 *M0?(M8?*"])},
    "SA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8>	&@ 0,"])},
    "SN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8G(G2"])},
    "RS": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["80M,?/>"])},
    "SC": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8GG2G8"])},
    "SL": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8?0M0> 2?("])},
    "SG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8?M>*A0"])},
    "SX": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8?(M .>0MG("])},
    "SK": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8M2K->?/>"])},
    "SI": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8M2K-G(?/>"])},
    "SB": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8K2K.K( >*A90A"])},
    "SO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8K.>2?/>"])},
    "ZA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["&M7?# +M0?>"])},
    "KR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["&M7?# K0?/>"])},
    "SS": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["&M7?# 8A!>("])},
    "ES": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8M*G("])},
    "LK": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["6M0@2M>"])},
    "SD": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8A!>("])},
    "SR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8A0?(G."])},
    "SJ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8->2M,>0M! 0 >( .>/G("])},
    "SZ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8M5>?2M/>#M!"])},
    "SE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8M5?!G("])},
    "CH": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8M5?02M/>#M!"])},
    "SY": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8?0?/>"])},
    "TW": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["$>5>("])},
    "TJ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["$>??8M$>("])},
    "TZ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["$>(M>(?/>"])},
    "TH": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["%>2M/>#M!"])},
    "TG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["KK"])},
    "TK": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["$KG2>	"])},
    "TO": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["K>"])},
    "TT": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["$M0?(?!>! #M! K,>K"])},
    "TN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["M/A(?8?/>"])},
    "TR": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["0M@"])},
    "TM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["$A0M.G(?8M$>("])},
    "TC": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["$A0M 0 >K8 >*A"])},
    "TV": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["$A->2A"])},
    "VI": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8/AM$ 0>M/ -0M?( >*A90A"])},
    "UG": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["/A>#M!>"])},
    "UA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["/AM0G("])},
    "AE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8/AM$ 0, .?0>M8"])},
    "GB": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8/AM$ '?0>M/"])},
    "US": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["8/AM$ 0>M/"])},
    "UY": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["	0BM5G"])},
    "UZ": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["	M,G?8M$>("])},
    "VU": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["->(A$A"])},
    "VA": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["-G?( 8?@"])},
    "VE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["-G(GA2>"])},
    "VN": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["-?$(>."])},
    "WF": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["5>2?8 0 +AA(>"])},
    "EH": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["*6M?.@ 8>9>0>"])},
    "YE": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["/G.G("])},
    "ZM": (ctx) => {const { normalize: _normalize } = ctx;return _normalize([">.M,?/>"])},
    "ZW": (ctx) => {const { normalize: _normalize } = ctx;return _normalize(["?.M,>,5G"])}
  }
}